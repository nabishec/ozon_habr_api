// Code generated by http://github.com/gojuno/minimock (v3.4.5). DO NOT EDIT.

package commentmutation

//go:generate minimock -i github.com/nabishec/ozon_habr_api/internal/handlers/comment_mutation.CommentMutationImp -o comment_mutation_imp_mock_test.go -n CommentMutationImpMock -p commentmutation

import (
	"context"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
	"github.com/nabishec/ozon_habr_api/internal/model"
)

// CommentMutationImpMock implements CommentMutationImp
type CommentMutationImpMock struct {
	t          minimock.Tester
	finishOnce sync.Once

	funcAddComment          func(ctx context.Context, postID int64, newComment *model.NewComment) (cp1 *model.Comment, err error)
	funcAddCommentOrigin    string
	inspectFuncAddComment   func(ctx context.Context, postID int64, newComment *model.NewComment)
	afterAddCommentCounter  uint64
	beforeAddCommentCounter uint64
	AddCommentMock          mCommentMutationImpMockAddComment
}

// NewCommentMutationImpMock returns a mock for CommentMutationImp
func NewCommentMutationImpMock(t minimock.Tester) *CommentMutationImpMock {
	m := &CommentMutationImpMock{t: t}

	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.AddCommentMock = mCommentMutationImpMockAddComment{mock: m}
	m.AddCommentMock.callArgs = []*CommentMutationImpMockAddCommentParams{}

	t.Cleanup(m.MinimockFinish)

	return m
}

type mCommentMutationImpMockAddComment struct {
	optional           bool
	mock               *CommentMutationImpMock
	defaultExpectation *CommentMutationImpMockAddCommentExpectation
	expectations       []*CommentMutationImpMockAddCommentExpectation

	callArgs []*CommentMutationImpMockAddCommentParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// CommentMutationImpMockAddCommentExpectation specifies expectation struct of the CommentMutationImp.AddComment
type CommentMutationImpMockAddCommentExpectation struct {
	mock               *CommentMutationImpMock
	params             *CommentMutationImpMockAddCommentParams
	paramPtrs          *CommentMutationImpMockAddCommentParamPtrs
	expectationOrigins CommentMutationImpMockAddCommentExpectationOrigins
	results            *CommentMutationImpMockAddCommentResults
	returnOrigin       string
	Counter            uint64
}

// CommentMutationImpMockAddCommentParams contains parameters of the CommentMutationImp.AddComment
type CommentMutationImpMockAddCommentParams struct {
	ctx        context.Context
	postID     int64
	newComment *model.NewComment
}

// CommentMutationImpMockAddCommentParamPtrs contains pointers to parameters of the CommentMutationImp.AddComment
type CommentMutationImpMockAddCommentParamPtrs struct {
	ctx        *context.Context
	postID     *int64
	newComment **model.NewComment
}

// CommentMutationImpMockAddCommentResults contains results of the CommentMutationImp.AddComment
type CommentMutationImpMockAddCommentResults struct {
	cp1 *model.Comment
	err error
}

// CommentMutationImpMockAddCommentOrigins contains origins of expectations of the CommentMutationImp.AddComment
type CommentMutationImpMockAddCommentExpectationOrigins struct {
	origin           string
	originCtx        string
	originPostID     string
	originNewComment string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmAddComment *mCommentMutationImpMockAddComment) Optional() *mCommentMutationImpMockAddComment {
	mmAddComment.optional = true
	return mmAddComment
}

// Expect sets up expected params for CommentMutationImp.AddComment
func (mmAddComment *mCommentMutationImpMockAddComment) Expect(ctx context.Context, postID int64, newComment *model.NewComment) *mCommentMutationImpMockAddComment {
	if mmAddComment.mock.funcAddComment != nil {
		mmAddComment.mock.t.Fatalf("CommentMutationImpMock.AddComment mock is already set by Set")
	}

	if mmAddComment.defaultExpectation == nil {
		mmAddComment.defaultExpectation = &CommentMutationImpMockAddCommentExpectation{}
	}

	if mmAddComment.defaultExpectation.paramPtrs != nil {
		mmAddComment.mock.t.Fatalf("CommentMutationImpMock.AddComment mock is already set by ExpectParams functions")
	}

	mmAddComment.defaultExpectation.params = &CommentMutationImpMockAddCommentParams{ctx, postID, newComment}
	mmAddComment.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmAddComment.expectations {
		if minimock.Equal(e.params, mmAddComment.defaultExpectation.params) {
			mmAddComment.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmAddComment.defaultExpectation.params)
		}
	}

	return mmAddComment
}

// ExpectCtxParam1 sets up expected param ctx for CommentMutationImp.AddComment
func (mmAddComment *mCommentMutationImpMockAddComment) ExpectCtxParam1(ctx context.Context) *mCommentMutationImpMockAddComment {
	if mmAddComment.mock.funcAddComment != nil {
		mmAddComment.mock.t.Fatalf("CommentMutationImpMock.AddComment mock is already set by Set")
	}

	if mmAddComment.defaultExpectation == nil {
		mmAddComment.defaultExpectation = &CommentMutationImpMockAddCommentExpectation{}
	}

	if mmAddComment.defaultExpectation.params != nil {
		mmAddComment.mock.t.Fatalf("CommentMutationImpMock.AddComment mock is already set by Expect")
	}

	if mmAddComment.defaultExpectation.paramPtrs == nil {
		mmAddComment.defaultExpectation.paramPtrs = &CommentMutationImpMockAddCommentParamPtrs{}
	}
	mmAddComment.defaultExpectation.paramPtrs.ctx = &ctx
	mmAddComment.defaultExpectation.expectationOrigins.originCtx = minimock.CallerInfo(1)

	return mmAddComment
}

// ExpectPostIDParam2 sets up expected param postID for CommentMutationImp.AddComment
func (mmAddComment *mCommentMutationImpMockAddComment) ExpectPostIDParam2(postID int64) *mCommentMutationImpMockAddComment {
	if mmAddComment.mock.funcAddComment != nil {
		mmAddComment.mock.t.Fatalf("CommentMutationImpMock.AddComment mock is already set by Set")
	}

	if mmAddComment.defaultExpectation == nil {
		mmAddComment.defaultExpectation = &CommentMutationImpMockAddCommentExpectation{}
	}

	if mmAddComment.defaultExpectation.params != nil {
		mmAddComment.mock.t.Fatalf("CommentMutationImpMock.AddComment mock is already set by Expect")
	}

	if mmAddComment.defaultExpectation.paramPtrs == nil {
		mmAddComment.defaultExpectation.paramPtrs = &CommentMutationImpMockAddCommentParamPtrs{}
	}
	mmAddComment.defaultExpectation.paramPtrs.postID = &postID
	mmAddComment.defaultExpectation.expectationOrigins.originPostID = minimock.CallerInfo(1)

	return mmAddComment
}

// ExpectNewCommentParam3 sets up expected param newComment for CommentMutationImp.AddComment
func (mmAddComment *mCommentMutationImpMockAddComment) ExpectNewCommentParam3(newComment *model.NewComment) *mCommentMutationImpMockAddComment {
	if mmAddComment.mock.funcAddComment != nil {
		mmAddComment.mock.t.Fatalf("CommentMutationImpMock.AddComment mock is already set by Set")
	}

	if mmAddComment.defaultExpectation == nil {
		mmAddComment.defaultExpectation = &CommentMutationImpMockAddCommentExpectation{}
	}

	if mmAddComment.defaultExpectation.params != nil {
		mmAddComment.mock.t.Fatalf("CommentMutationImpMock.AddComment mock is already set by Expect")
	}

	if mmAddComment.defaultExpectation.paramPtrs == nil {
		mmAddComment.defaultExpectation.paramPtrs = &CommentMutationImpMockAddCommentParamPtrs{}
	}
	mmAddComment.defaultExpectation.paramPtrs.newComment = &newComment
	mmAddComment.defaultExpectation.expectationOrigins.originNewComment = minimock.CallerInfo(1)

	return mmAddComment
}

// Inspect accepts an inspector function that has same arguments as the CommentMutationImp.AddComment
func (mmAddComment *mCommentMutationImpMockAddComment) Inspect(f func(ctx context.Context, postID int64, newComment *model.NewComment)) *mCommentMutationImpMockAddComment {
	if mmAddComment.mock.inspectFuncAddComment != nil {
		mmAddComment.mock.t.Fatalf("Inspect function is already set for CommentMutationImpMock.AddComment")
	}

	mmAddComment.mock.inspectFuncAddComment = f

	return mmAddComment
}

// Return sets up results that will be returned by CommentMutationImp.AddComment
func (mmAddComment *mCommentMutationImpMockAddComment) Return(cp1 *model.Comment, err error) *CommentMutationImpMock {
	if mmAddComment.mock.funcAddComment != nil {
		mmAddComment.mock.t.Fatalf("CommentMutationImpMock.AddComment mock is already set by Set")
	}

	if mmAddComment.defaultExpectation == nil {
		mmAddComment.defaultExpectation = &CommentMutationImpMockAddCommentExpectation{mock: mmAddComment.mock}
	}
	mmAddComment.defaultExpectation.results = &CommentMutationImpMockAddCommentResults{cp1, err}
	mmAddComment.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmAddComment.mock
}

// Set uses given function f to mock the CommentMutationImp.AddComment method
func (mmAddComment *mCommentMutationImpMockAddComment) Set(f func(ctx context.Context, postID int64, newComment *model.NewComment) (cp1 *model.Comment, err error)) *CommentMutationImpMock {
	if mmAddComment.defaultExpectation != nil {
		mmAddComment.mock.t.Fatalf("Default expectation is already set for the CommentMutationImp.AddComment method")
	}

	if len(mmAddComment.expectations) > 0 {
		mmAddComment.mock.t.Fatalf("Some expectations are already set for the CommentMutationImp.AddComment method")
	}

	mmAddComment.mock.funcAddComment = f
	mmAddComment.mock.funcAddCommentOrigin = minimock.CallerInfo(1)
	return mmAddComment.mock
}

// When sets expectation for the CommentMutationImp.AddComment which will trigger the result defined by the following
// Then helper
func (mmAddComment *mCommentMutationImpMockAddComment) When(ctx context.Context, postID int64, newComment *model.NewComment) *CommentMutationImpMockAddCommentExpectation {
	if mmAddComment.mock.funcAddComment != nil {
		mmAddComment.mock.t.Fatalf("CommentMutationImpMock.AddComment mock is already set by Set")
	}

	expectation := &CommentMutationImpMockAddCommentExpectation{
		mock:               mmAddComment.mock,
		params:             &CommentMutationImpMockAddCommentParams{ctx, postID, newComment},
		expectationOrigins: CommentMutationImpMockAddCommentExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmAddComment.expectations = append(mmAddComment.expectations, expectation)
	return expectation
}

// Then sets up CommentMutationImp.AddComment return parameters for the expectation previously defined by the When method
func (e *CommentMutationImpMockAddCommentExpectation) Then(cp1 *model.Comment, err error) *CommentMutationImpMock {
	e.results = &CommentMutationImpMockAddCommentResults{cp1, err}
	return e.mock
}

// Times sets number of times CommentMutationImp.AddComment should be invoked
func (mmAddComment *mCommentMutationImpMockAddComment) Times(n uint64) *mCommentMutationImpMockAddComment {
	if n == 0 {
		mmAddComment.mock.t.Fatalf("Times of CommentMutationImpMock.AddComment mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmAddComment.expectedInvocations, n)
	mmAddComment.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmAddComment
}

func (mmAddComment *mCommentMutationImpMockAddComment) invocationsDone() bool {
	if len(mmAddComment.expectations) == 0 && mmAddComment.defaultExpectation == nil && mmAddComment.mock.funcAddComment == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmAddComment.mock.afterAddCommentCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmAddComment.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// AddComment implements CommentMutationImp
func (mmAddComment *CommentMutationImpMock) AddComment(ctx context.Context, postID int64, newComment *model.NewComment) (cp1 *model.Comment, err error) {
	mm_atomic.AddUint64(&mmAddComment.beforeAddCommentCounter, 1)
	defer mm_atomic.AddUint64(&mmAddComment.afterAddCommentCounter, 1)

	mmAddComment.t.Helper()

	if mmAddComment.inspectFuncAddComment != nil {
		mmAddComment.inspectFuncAddComment(ctx, postID, newComment)
	}

	mm_params := CommentMutationImpMockAddCommentParams{ctx, postID, newComment}

	// Record call args
	mmAddComment.AddCommentMock.mutex.Lock()
	mmAddComment.AddCommentMock.callArgs = append(mmAddComment.AddCommentMock.callArgs, &mm_params)
	mmAddComment.AddCommentMock.mutex.Unlock()

	for _, e := range mmAddComment.AddCommentMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.cp1, e.results.err
		}
	}

	if mmAddComment.AddCommentMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmAddComment.AddCommentMock.defaultExpectation.Counter, 1)
		mm_want := mmAddComment.AddCommentMock.defaultExpectation.params
		mm_want_ptrs := mmAddComment.AddCommentMock.defaultExpectation.paramPtrs

		mm_got := CommentMutationImpMockAddCommentParams{ctx, postID, newComment}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmAddComment.t.Errorf("CommentMutationImpMock.AddComment got unexpected parameter ctx, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmAddComment.AddCommentMock.defaultExpectation.expectationOrigins.originCtx, *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.postID != nil && !minimock.Equal(*mm_want_ptrs.postID, mm_got.postID) {
				mmAddComment.t.Errorf("CommentMutationImpMock.AddComment got unexpected parameter postID, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmAddComment.AddCommentMock.defaultExpectation.expectationOrigins.originPostID, *mm_want_ptrs.postID, mm_got.postID, minimock.Diff(*mm_want_ptrs.postID, mm_got.postID))
			}

			if mm_want_ptrs.newComment != nil && !minimock.Equal(*mm_want_ptrs.newComment, mm_got.newComment) {
				mmAddComment.t.Errorf("CommentMutationImpMock.AddComment got unexpected parameter newComment, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmAddComment.AddCommentMock.defaultExpectation.expectationOrigins.originNewComment, *mm_want_ptrs.newComment, mm_got.newComment, minimock.Diff(*mm_want_ptrs.newComment, mm_got.newComment))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmAddComment.t.Errorf("CommentMutationImpMock.AddComment got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmAddComment.AddCommentMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmAddComment.AddCommentMock.defaultExpectation.results
		if mm_results == nil {
			mmAddComment.t.Fatal("No results are set for the CommentMutationImpMock.AddComment")
		}
		return (*mm_results).cp1, (*mm_results).err
	}
	if mmAddComment.funcAddComment != nil {
		return mmAddComment.funcAddComment(ctx, postID, newComment)
	}
	mmAddComment.t.Fatalf("Unexpected call to CommentMutationImpMock.AddComment. %v %v %v", ctx, postID, newComment)
	return
}

// AddCommentAfterCounter returns a count of finished CommentMutationImpMock.AddComment invocations
func (mmAddComment *CommentMutationImpMock) AddCommentAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmAddComment.afterAddCommentCounter)
}

// AddCommentBeforeCounter returns a count of CommentMutationImpMock.AddComment invocations
func (mmAddComment *CommentMutationImpMock) AddCommentBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmAddComment.beforeAddCommentCounter)
}

// Calls returns a list of arguments used in each call to CommentMutationImpMock.AddComment.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmAddComment *mCommentMutationImpMockAddComment) Calls() []*CommentMutationImpMockAddCommentParams {
	mmAddComment.mutex.RLock()

	argCopy := make([]*CommentMutationImpMockAddCommentParams, len(mmAddComment.callArgs))
	copy(argCopy, mmAddComment.callArgs)

	mmAddComment.mutex.RUnlock()

	return argCopy
}

// MinimockAddCommentDone returns true if the count of the AddComment invocations corresponds
// the number of defined expectations
func (m *CommentMutationImpMock) MinimockAddCommentDone() bool {
	if m.AddCommentMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.AddCommentMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.AddCommentMock.invocationsDone()
}

// MinimockAddCommentInspect logs each unmet expectation
func (m *CommentMutationImpMock) MinimockAddCommentInspect() {
	for _, e := range m.AddCommentMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to CommentMutationImpMock.AddComment at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterAddCommentCounter := mm_atomic.LoadUint64(&m.afterAddCommentCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.AddCommentMock.defaultExpectation != nil && afterAddCommentCounter < 1 {
		if m.AddCommentMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to CommentMutationImpMock.AddComment at\n%s", m.AddCommentMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to CommentMutationImpMock.AddComment at\n%s with params: %#v", m.AddCommentMock.defaultExpectation.expectationOrigins.origin, *m.AddCommentMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcAddComment != nil && afterAddCommentCounter < 1 {
		m.t.Errorf("Expected call to CommentMutationImpMock.AddComment at\n%s", m.funcAddCommentOrigin)
	}

	if !m.AddCommentMock.invocationsDone() && afterAddCommentCounter > 0 {
		m.t.Errorf("Expected %d calls to CommentMutationImpMock.AddComment at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.AddCommentMock.expectedInvocations), m.AddCommentMock.expectedInvocationsOrigin, afterAddCommentCounter)
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *CommentMutationImpMock) MinimockFinish() {
	m.finishOnce.Do(func() {
		if !m.minimockDone() {
			m.MinimockAddCommentInspect()
		}
	})
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *CommentMutationImpMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *CommentMutationImpMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockAddCommentDone()
}
